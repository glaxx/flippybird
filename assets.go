/*
 *    Copyright (C) 2015 Stefan Luecke
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    Authors: Stefan Luecke <glaxx@glaxx.net>
 */

package main

 import (
 "strconv"
 )

func GetLogo() [][]byte {
	return [][]byte{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
	{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0},
	{0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
	{0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0},
	{0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
	{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	}
}

func Get0() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get1() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,1,0,0,1,0},
		{0,0,1,0,0,0,1,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get2() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,1,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,1,1,0},
		{0,1,0,0,1,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,0,1,0,0,0,1,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get3() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,1,1,0,1,0},
		{0,0,1,0,0,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get4() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,1,0,1,0,0,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get5() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,1,1,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,0,1,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get6() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,0,1,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get7() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,1,1,0,0},
		{0,1,0,0,1,0,0,0},
		{0,1,0,1,1,0,0,0},
		{0,1,1,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get8() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,1,0,1,1,0,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,0,1,0,1,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}

func Get9() [][]byte {
	return [][]byte{
		{0,0,0,0,0,0,0,0},
		{0,0,1,0,0,0,0,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,0,1,0,1,1,0,0},
		{0,0,0,0,0,0,0,0},
	}
}


func InttoMsg(size_x, size_y, i int) [][]byte {
	res := make([][]byte, size_x)
	for x := 0; x != len(res); x++{
		res[x] = make([]byte, size_y)
	}
	str := strconv.Itoa(i)

	var a [][]byte

	for j := 0; j != len(str); j++ {
		switch (str[j]) {
			case 48: 
				a = Get0()
			case 49:
				a = Get1()
			case 50:
				a = Get2()
			case 51:
				a = Get3()
			case 52:
				a = Get4()
			case 53:
				a = Get5()
			case 54:
				a = Get6()
			case 55:
				a = Get7()
			case 56:
				a = Get8()
			case 57:
				a = Get9()
		}
		for x := 0; x != len(a); x++ {
			for y := 0; y != len(a[0]); y++ {
				res[x+j*8][y] = a[x][y]

			}
		}
	}
	return res
}
